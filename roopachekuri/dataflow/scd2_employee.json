{
	"name": "scd2_employee",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText1",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "emp_scd2",
						"type": "DatasetReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "emp_scd2",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "emp_scd2",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "sorcehash"
				},
				{
					"name": "targethash"
				},
				{
					"name": "exists1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "exists2"
				},
				{
					"name": "exists3"
				},
				{
					"name": "inactive"
				},
				{
					"name": "alterRow1"
				},
				{
					"name": "select2"
				},
				{
					"name": "AlterRow"
				}
			],
			"scriptLines": [
				"source(output(",
				"          EmployeeID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Department as string,",
				"          Title as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          EmployeeID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Department as string,",
				"          Title as string,",
				"          Location as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> target",
				"source1 derive(hash = md5(EmployeeID,FirstName,Location,Department)) ~> sorcehash",
				"target derive(targethash = md5(EmployeeID,FirstName,Location,Department)) ~> targethash",
				"sorcehash, targethash exists(hash == targethash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists1",
				"exists1 derive(active_flag = 1) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          EmployeeID,",
				"          FirstName,",
				"          LastName,",
				"          Department,",
				"          Title,",
				"          Location,",
				"          active_flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"targethash, sorcehash exists(target@EmployeeID == source1@EmployeeID,",
				"     negate:false,",
				"     broadcast: 'auto')~> exists2",
				"exists2, sorcehash exists(targethash == hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> exists3",
				"exists3 derive(active_flag = 0) ~> inactive",
				"inactive alterRow(updateIf(true())) ~> alterRow1",
				"alterRow1 select(mapColumn(",
				"          EmployeeID,",
				"          FirstName,",
				"          LastName,",
				"          Department,",
				"          Title,",
				"          Location,",
				"          active_flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"select1 alterRow(updateIf(true())) ~> AlterRow",
				"AlterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Department as string,",
				"          Title as string,",
				"          Location as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['EmployeeID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1)) ~> sink1",
				"select2 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          EmployeeID as integer,",
				"          FirstName as string,",
				"          LastName as string,",
				"          Department as string,",
				"          Title as string,",
				"          Location as string",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:false,",
				"     upsertable:true,",
				"     keys:['EmployeeID'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     partitionBy('hash', 1)) ~> sink2"
			]
		}
	}
}